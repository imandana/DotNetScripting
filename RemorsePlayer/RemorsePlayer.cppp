// Standard headers
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <iostream>

// Provided by the AppHost NuGet package and installed as an SDK pack
#include <nethost.h>

// Header files copied from https://github.com/dotnet/core-setup
#include <coreclr_delegates.h>
#include <hostfxr.h>

#ifdef WINDOWS
#include <Windows.h>

#define STR(s) L ## s
#define CH(c) L ## c
#define DIR_SEPARATOR L'\\'

#else
#include <dlfcn.h>
#include <limits.h>

#define STR(s) s
#define CH(c) c
#define DIR_SEPARATOR '/'
#define MAX_PATH PATH_MAX

#endif

using string_t = std::basic_string<char_t>;

namespace
{
    // Globals to hold hostfxr exports
    hostfxr_initialize_for_runtime_config_fn init_fptr;
    hostfxr_get_runtime_delegate_fn get_delegate_fptr;
    hostfxr_close_fn close_fptr;

    // Forward declarations
    bool load_hostfxr();
    load_assembly_and_get_function_pointer_fn get_dotnet_load_assembly(const char_t *assembly);
}

struct GameObject
{
	const char_t *name;
	int posX;
	int posY;
	int isChanged;
	
/* 	void (*FunctionChange)(int val);
	void ChangePosX(int val)
	{
		posX = val;
	} */
	
};

#if defined(WINDOWS)
int __cdecl wmain(int argc, wchar_t *argv[])
#else
int main(int argc, char *argv[])
#endif
{
    // Get the current executable's directory
    // This sample assumes the managed assembly to load and its runtime configuration file are next to the host
    char_t host_path[MAX_PATH];
#if WINDOWS
    auto size = ::GetFullPathNameW(argv[0], sizeof(host_path) / sizeof(char_t), host_path, nullptr);
    assert(size != 0);
#else
    auto resolved = realpath(argv[0], host_path);
    assert(resolved != nullptr);
#endif

    string_t root_path = host_path;
    auto pos = root_path.find_last_of(DIR_SEPARATOR);
    assert(pos != string_t::npos);
    root_path = root_path.substr(0, pos + 1);

    if (!load_hostfxr())
    {
        assert(false && "Failure: load_hostfxr()");
        return EXIT_FAILURE;
    }

    const string_t config_path = root_path + STR("RemorseEngine.runtimeconfig.json");
    load_assembly_and_get_function_pointer_fn load_assembly_and_get_function_pointer = nullptr;
    load_assembly_and_get_function_pointer = get_dotnet_load_assembly(config_path.c_str());
    assert(load_assembly_and_get_function_pointer != nullptr && "Failure: get_dotnet_load_assembly()");

///////////////////////////////////////////////////////////
//////////// DotNet Behaviour /////////////////////////////
//////////////////////////////////////////////////////////
	
    const string_t dotnetlib_path = root_path + STR("RemorseEngine.dll");
	
	int rc;
    typedef void (CORECLR_DELEGATE_CALLTYPE *custom_awake)(GameObject go, int size);
    const char_t *dotnet_type_GO = STR("RemorseEngine.Lulu, RemorseEngine");
	
    const char_t *awakes = STR("Awake");
    // <SnippetLoadAndGet>
    // Function pointer to managed delegate
    custom_awake awake = nullptr;
    rc = load_assembly_and_get_function_pointer(
        dotnetlib_path.c_str(),
        dotnet_type_GO,
        awakes,
        STR("RemorseEngine.DotNetBehaviour+AwakeDelegate, RemorseEngine") /*delegate_type_name*/,
        nullptr,
        (void**)&awake);
		
    // </SnippetLoadAndGet>
    assert(rc == 0 && awake != nullptr && "Failure: load_assembly_and_get_function_pointer()");

        // <SnippetCallManaged>
        GameObject go
        {
            STR("INI GO DOTNET"),
            4,
			10,
			0
        };

        awake(go, sizeof(go));
        // </SnippetCallManaged>
	
    // Function pointer to managed delegate with non-default signature
    typedef void (CORECLR_DELEGATE_CALLTYPE *custom_start)();
    custom_start start = nullptr;
    rc = load_assembly_and_get_function_pointer(
        dotnetlib_path.c_str(),
        dotnet_type_GO,
        STR("Start") /*method_name*/,
        STR("RemorseEngine.DotNetBehaviour+StartDelegate, RemorseEngine") /*delegate_type_name*/,
        nullptr,
        (void**)&start);
    assert(rc == 0 && start != nullptr && "Failure: load_assembly_and_get_function_pointer()");

	start();
	
	go.name = STR("INI GO DOTNET");
	start();
	
	printf("From cpp posX = %d \n", go.posX);
    // Function pointer to managed delegate with non-default signature
    typedef void (CORECLR_DELEGATE_CALLTYPE *custom_update)();
    custom_update update = nullptr;
    rc = load_assembly_and_get_function_pointer(
        dotnetlib_path.c_str(),
        dotnet_type_GO,
        STR("Update") /*method_name*/,
        STR("RemorseEngine.DotNetBehaviour+StartDelegate, RemorseEngine") /*delegate_type_name*/,
        nullptr,
        (void**)&update);
    assert(rc == 0 && update != nullptr && "Failure: load_assembly_and_get_function_pointer()");

	update();
	
    // Function pointer to managed delegate with non-default signature
    typedef char_t * (CORECLR_DELEGATE_CALLTYPE *custom_change_str_from_managed)();
    custom_change_str_from_managed GetStrManaged = nullptr;
    rc = load_assembly_and_get_function_pointer(
        dotnetlib_path.c_str(),
        dotnet_type_GO,
        STR("GetStrManaged") /*method_name*/,
        STR("RemorseEngine.DotNetBehaviour+GetStrManagedDelegate, RemorseEngine") /*delegate_type_name*/,
        nullptr,
        (void**)&GetStrManaged);
    assert(rc == 0 && GetStrManaged != nullptr && "Failure: load_assembly_and_get_function_pointer()");

	char_t* hoi = GetStrManaged();
	
	printf("From Managed = %s \n", hoi);
	
    // Function pointer to managed delegate with non-default signature
	const char_t *dotnet_type_GO2 = STR("RemorseEngine.GameObject, RemorseEngine");
    typedef int (CORECLR_DELEGATE_CALLTYPE *custom_change_obj_from_managed)();
    custom_change_obj_from_managed ChangePosX = nullptr;
    rc = load_assembly_and_get_function_pointer(
        dotnetlib_path.c_str(),
        dotnet_type_GO2,
        STR("ChangePosX") /*method_name*/,
        STR("RemorseEngine.GameObject+ChangePosXDelegate, RemorseEngine") /*delegate_type_name*/,
        nullptr,
        (void**)&ChangePosX);
    assert(rc == 0 && ChangePosX != nullptr && "Failure: load_assembly_and_get_function_pointer()");

	go.posX = ChangePosX();
	
	printf("From Managed = %d \n", go.posX);
	
	// Function pointer to managed delegate with non-default signature
    typedef GameObject (CORECLR_DELEGATE_CALLTYPE *custom_change_objALL_from_managed)();
    custom_change_objALL_from_managed GetIsChanged = nullptr;
    rc = load_assembly_and_get_function_pointer(
        dotnetlib_path.c_str(),
        dotnet_type_GO2,
        STR("GetIsChanged") /*method_name*/,
        STR("RemorseEngine.GameObject+GetIsChangedDelegate, RemorseEngine") /*delegate_type_name*/,
        nullptr,
        (void**)&GetIsChanged);
    assert(rc == 0 && GetIsChanged != nullptr && "Failure: load_assembly_and_get_function_pointer()");
	
	
    // Function pointer to managed delegate with non-default signature
    typedef GameObject (CORECLR_DELEGATE_CALLTYPE *custom_change_objALL_from_managed)();
    custom_change_objALL_from_managed UpdateNativeGO = nullptr;
    rc = load_assembly_and_get_function_pointer(
        dotnetlib_path.c_str(),
        dotnet_type_GO2,
        STR("UpdateNativeGO") /*method_name*/,
        STR("RemorseEngine.GameObject+UpdateNativeGODelegate, RemorseEngine") /*delegate_type_name*/,
        nullptr,
        (void**)&UpdateNativeGO);
    assert(rc == 0 && UpdateNativeGO != nullptr && "Failure: load_assembly_and_get_function_pointer()");

	go = UpdateNativeGO();
	
	printf("From Managed = %d \n", go.posX);
	
	printf("From Managed = %d \n", go.posY);
	printf("From Managed = %s \n", go.name);
	
    return EXIT_SUCCESS;
}

/********************************************************************************************
 * Function used to load and activate .NET Core
 ********************************************************************************************/

namespace
{
    // Forward declarations
    void *load_library(const char_t *);
    void *get_export(void *, const char *);

#ifdef WINDOWS
    void *load_library(const char_t *path)
    {
        HMODULE h = ::LoadLibraryW(path);
        assert(h != nullptr);
        return (void*)h;
    }
    void *get_export(void *h, const char *name)
    {
        void *f = ::GetProcAddress((HMODULE)h, name);
        assert(f != nullptr);
        return f;
    }
#else
    void *load_library(const char_t *path)
    {
        void *h = dlopen(path, RTLD_LAZY | RTLD_LOCAL);
        assert(h != nullptr);
        return h;
    }
    void *get_export(void *h, const char *name)
    {
        void *f = dlsym(h, name);
        assert(f != nullptr);
        return f;
    }
#endif

    // <SnippetLoadHostFxr>
    // Using the nethost library, discover the location of hostfxr and get exports
    bool load_hostfxr()
    {
        // Pre-allocate a large buffer for the path to hostfxr
        char_t buffer[MAX_PATH];
        size_t buffer_size = sizeof(buffer) / sizeof(char_t);
        int rc = get_hostfxr_path(buffer, &buffer_size, nullptr);
        if (rc != 0)
            return false;

        // Load hostfxr and get desired exports
        void *lib = load_library(buffer);
        init_fptr = (hostfxr_initialize_for_runtime_config_fn)get_export(lib, "hostfxr_initialize_for_runtime_config");
        get_delegate_fptr = (hostfxr_get_runtime_delegate_fn)get_export(lib, "hostfxr_get_runtime_delegate");
        close_fptr = (hostfxr_close_fn)get_export(lib, "hostfxr_close");

        return (init_fptr && get_delegate_fptr && close_fptr);
    }
    // </SnippetLoadHostFxr>

    // <SnippetInitialize>
    // Load and initialize .NET Core and get desired function pointer for scenario
    load_assembly_and_get_function_pointer_fn get_dotnet_load_assembly(const char_t *config_path)
    {
        // Load .NET Core
        void *load_assembly_and_get_function_pointer = nullptr;
        hostfxr_handle cxt = nullptr;
        int rc = init_fptr(config_path, nullptr, &cxt);
        if (rc != 0 || cxt == nullptr)
        {
            std::cerr << "Init failed: " << std::hex << std::showbase << rc << std::endl;
            close_fptr(cxt);
            return nullptr;
        }

        // Get the load assembly function pointer
        rc = get_delegate_fptr(
            cxt,
            hdt_load_assembly_and_get_function_pointer,
            &load_assembly_and_get_function_pointer);
        if (rc != 0 || load_assembly_and_get_function_pointer == nullptr)
            std::cerr << "Get delegate failed: " << std::hex << std::showbase << rc << std::endl;

        close_fptr(cxt);
        return (load_assembly_and_get_function_pointer_fn)load_assembly_and_get_function_pointer;
    }
    // </SnippetInitialize>
}
